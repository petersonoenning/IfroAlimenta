@page "/ranking"
@using IfroAlimenta.Models
@using IfroAlimenta.Controllers
@inject AvaliacaoController AvaliacaoController
@rendermode InteractiveServer

<div class="container-fluid py-4">
    <h4 class="text-center mb-4 fw-bold text-uppercase" style="font-size: 1.8rem; color: #333;">Ranking de Produtos</h4>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @if (produtos != null && produtos.Any())
        {
            <div class="card shadow-lg p-4">
                <table class="table table-striped">
                    <thead class="table-light">
                        <tr>
                            <th class="fw-bold">Posição</th>
                            <th class="fw-bold">Produto</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < produtos.Count; i++)
                        {
                            <tr>
                                <td>@(i + 1)º</td>
                                <td>@produtos[i].Nome</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center mt-4" role="alert">
                Nenhum produto encontrado.
            </div>
        }
    }
</div>

<style>
    .table {
        margin-top: 20px;
        border-collapse: separate;
        border-spacing: 0;
    }

        .table th, .table td {
            vertical-align: middle;
            padding: 12px;
        }

        .table thead th {
            background-color: #f8f9fa;
            color: #333;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .table-striped tbody tr:hover {
        background-color: #e9ecef;
    }

    .card {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
    }

    .card-shadow-lg {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .alert {
        font-size: 1rem;
        font-weight: bold;
        border-radius: 0.25rem;
        padding: 15px;
        margin-top: 20px;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
        border-color: #ffeeba;
    }
</style>

@code {
    private List<Produto> produtos = new List<Produto>();
    private bool isLoading = true; // Indicador de carregamento

    protected override async Task OnInitializedAsync()
    {
        // Simular carregamento
        await Task.Delay(1000); // Remova esta linha quando tiver o carregamento real
        produtos = await AvaliacaoController.ListarProdutosComMediaNotas();
        isLoading = false;
    }

    private Task<List<Produto>> GetProdutosAsync()
    {
        // Lógica real de carregamento
        return Task.FromResult(new List<Produto>());
    }
}
